#include <LEDMatrixDriver.hpp>

/*
 *  A new example using hardware SPI driver by Bartosz Bielawski.
 *  Written by James Gohl on 09/02/2019.
 *  This example uses a full ASCII font which is only 5 pixels wide to save on memory.
 *  The font was created in my LEDMatrixPainter application (https://github.com/jamesgohl/LEDMatrixPainter).
 *  The characters are "bunched" together by detecting whitespace, and spaced out using the CHAR_SPACING constant for a cleaner appearance.
 */

// display in bytes so easier to tweak
// if you want the shorter font-set, change font[191] to font[95]
// and remove everything after /* 126 = ~ */
byte font[191][5] = {
{B00000000,B00000000,B00000000,B00000000,B00000000}, /* 032 =   */
{B01101111,B01101111,B00000000,B00000000,B00000000}, /* 033 = ! */
{B00000011,B00000000,B00000011,B00000000,B00000000}, /* 034 = " */
{B00101000,B01111100,B00101000,B01111100,B00101000}, /* 035 = # */
{B00100100,B00101010,B01111111,B00101010,B00010010}, /* 036 = $ */
{B01100011,B00010011,B00001000,B01100100,B01100011}, /* 037 = % */
{B00111010,B01000101,B01000101,B00111010,B01001000}, /* 038 = & */
{B00000011,B00000000,B00000000,B00000000,B00000000}, /* 039 = ' */
{B00011100,B00100010,B01000001,B00000000,B00000000}, /* 040 = ( */
{B01000001,B00100010,B00011100,B00000000,B00000000}, /* 041 = ) */
{B00000111,B00000111,B00000111,B00000000,B00000000}, /* 042 = * */
{B00010000,B00010000,B01111100,B00010000,B00010000}, /* 043 = + */
{B01110000,B00110000,B00000000,B00000000,B00000000}, /* 044 = , */
{B00001000,B00001000,B00001000,B00001000,B00001000}, /* 045 = - */
{B01100000,B01100000,B00000000,B00000000,B00000000}, /* 046 = . */
{B01100000,B00010000,B00001000,B00000100,B00000011}, /* 047 = / */
{B00111110,B01010001,B01001001,B01000101,B00111110}, /* 048 = 0 */
{B01000010,B01111111,B01000000,B00000000,B00000000}, /* 049 = 1 */
{B01000010,B01100001,B01010001,B01001001,B01000110}, /* 050 = 2 */
{B00100001,B01000001,B01000101,B01001011,B00110001}, /* 051 = 3 */
{B00011000,B00010100,B00010010,B01111111,B00010000}, /* 052 = 4 */
{B00100111,B01000101,B01000101,B01000101,B00111001}, /* 053 = 5 */
{B00111100,B01001010,B01001001,B01001001,B00110000}, /* 054 = 6 */
{B00000001,B00000001,B01111001,B00000101,B00000011}, /* 055 = 7 */
{B00110110,B01001001,B01001001,B01001001,B00110110}, /* 056 = 8 */
{B00000110,B01001001,B01001001,B00101001,B00011110}, /* 057 = 9 */
{B00110110,B00110110,B00000000,B00000000,B00000000}, /* 058 = : */
{B01110110,B00110110,B00000000,B00000000,B00000000}, /* 059 = ; */
{B00010000,B00101000,B01000100,B00000000,B00000000}, /* 060 = < */
{B00010100,B00010100,B00010100,B00010100,B00010100}, /* 061 = = */
{B01000100,B00101000,B00010000,B00000000,B00000000}, /* 062 = > */
{B00000010,B00000001,B01010001,B00001001,B00000110}, /* 063 = ? */
{B00111110,B01000001,B01011101,B01010101,B01011110}, /* 064 = @ */
{B01111110,B00010001,B00010001,B00010001,B01111110}, /* 065 = A */
{B01111111,B01001001,B01001001,B01001001,B00110110}, /* 066 = B */
{B00111110,B01000001,B01000001,B01000001,B00100010}, /* 067 = C */
{B01111111,B01000001,B01000001,B01000001,B00111110}, /* 068 = D */
{B01111111,B01001001,B01001001,B01001001,B01000001}, /* 069 = E */
{B01111111,B00001001,B00001001,B00001001,B00000001}, /* 070 = F */
{B00111110,B01000001,B01001001,B01001001,B01111010}, /* 071 = G */
{B01111111,B00001000,B00001000,B00001000,B01111111}, /* 072 = H */
{B01000001,B01111111,B01000001,B00000000,B00000000}, /* 073 = I */
{B00100000,B01000000,B01000001,B00111111,B00000001}, /* 074 = J */
{B01111111,B00001000,B00010100,B00100010,B01000001}, /* 075 = K */
{B01111111,B01000000,B01000000,B01000000,B01000000}, /* 076 = L */
{B01111111,B00000010,B00000100,B00000010,B01111111}, /* 077 = M */
{B01111111,B00000010,B00011100,B00100000,B01111111}, /* 078 = N */
{B00111110,B01000001,B01000001,B01000001,B00111110}, /* 079 = O */
{B01111111,B00010001,B00010001,B00010001,B00001110}, /* 080 = P */
{B00111110,B01000001,B01010001,B01100001,B01111110}, /* 081 = Q */
{B01111111,B00001001,B00011001,B00101001,B01000110}, /* 082 = R */
{B00100110,B01001001,B01001001,B01001001,B00110010}, /* 083 = S */
{B00000001,B00000001,B01111111,B00000001,B00000001}, /* 084 = T */
{B00111111,B01000000,B01000000,B01000000,B00111111}, /* 085 = U */
{B00011111,B00100000,B01000000,B00100000,B00011111}, /* 086 = V */
{B00111111,B01000000,B00110000,B01000000,B00111111}, /* 087 = W */
{B01100011,B00010100,B00001000,B00010100,B01100011}, /* 088 = X */
{B00000111,B00001000,B01110000,B00001000,B00000111}, /* 089 = Y */
{B01100001,B01010001,B01001001,B01000101,B01000011}, /* 090 = Z */
{B01111111,B01000001,B01000001,B00000000,B00000000}, /* 091 = [ */
{B00000011,B00000100,B00001000,B00010000,B01100000}, /* 092 = \ */
{B01000001,B01000001,B01111111,B00000000,B00000000}, /* 093 = ] */
{B00000100,B00000010,B00000001,B00000010,B00000100}, /* 094 = ^ */
{B01000000,B01000000,B01000000,B01000000,B01000000}, /* 095 = _ */
{B00000011,B00000000,B00000000,B00000000,B00000000}, /* 096 = ' */
{B00100000,B01010100,B01010100,B01010100,B01111000}, /* 097 = a */
{B01111111,B00101000,B01000100,B01000100,B00111000}, /* 098 = b */
{B00111000,B01000100,B01000100,B01000100,B00101000}, /* 099 = c */
{B00111000,B01000100,B01000100,B00101000,B01111111}, /* 100 = d */
{B00111000,B01010100,B01010100,B01010100,B00011000}, /* 101 = e */
{B00000100,B01111110,B00000101,B00000001,B00000010}, /* 102 = f */
{B00001000,B01010100,B01010100,B01010100,B00111100}, /* 103 = g */
{B01111111,B00000100,B00000100,B00000100,B01111000}, /* 104 = h */
{B01000100,B01111101,B01000000,B00000000,B00000000}, /* 105 = i */
{B00100000,B01000000,B01000100,B00111101,B00000000}, /* 106 = j */
{B01111111,B00010000,B00010000,B00101000,B01000100}, /* 107 = k */
{B01000001,B01111111,B01000000,B00000000,B00000000}, /* 108 = l */
{B01111100,B00000100,B01111100,B00000100,B01111000}, /* 109 = m */
{B01111100,B00001000,B00000100,B00000100,B01111000}, /* 110 = n */
{B00111000,B01000100,B01000100,B01000100,B00111000}, /* 111 = o */
{B01111100,B00100100,B00100100,B00100100,B00011000}, /* 112 = p */
{B00011000,B00100100,B00100100,B00100100,B01111100}, /* 113 = q */
{B01111100,B00001000,B00000100,B00000100,B00001000}, /* 114 = r */
{B01001000,B01010100,B01010100,B01010100,B00100000}, /* 115 = s */
{B00000100,B00111110,B01000100,B01000000,B00100000}, /* 116 = t */
{B00111100,B01000000,B01000000,B00100000,B01111100}, /* 117 = u */
{B00011100,B00100000,B01000000,B00100000,B00011100}, /* 118 = v */
{B00111100,B01000000,B00110000,B01000000,B00111100}, /* 119 = w */
{B01000100,B00101000,B00010000,B00101000,B01000100}, /* 120 = x */
{B00000100,B01001000,B00110000,B00001000,B00000100}, /* 121 = y */
{B01000100,B01100100,B01010100,B01001100,B01000100}, /* 122 = z */
{B00001000,B00110110,B01000001,B00000000,B00000000}, /* 123 = { */
{B01111111,B00000000,B00000000,B00000000,B00000000}, /* 124 = | */
{B01000001,B00110110,B00001000,B00000000,B00000000}, /* 125 = } */
{B00011000,B00000100,B00001000,B00010000,B00001100}, /* 126 = ~ */
{B00000000,B00000000,B00000000,B00000000,B00000000}, /* 127 =   */
{B01111011,B01111011,B00000000,B00000000,B00000000}, /* 128 = ¡ */
{B00011100,B00100010,B01111111,B00100010,B00010100}, /* 129 = ¢ */
{B01001000,B01111110,B01001001,B01001001,B01000010}, /* 130 = £ */
{B00100010,B00011100,B00010100,B00011100,B00100010}, /* 131 = ¤ */
{B00000001,B00101010,B01111100,B00101010,B00000001}, /* 132 = ¥ */
{B01110111,B00000000,B00000000,B00000000,B00000000}, /* 133 = ¦ */
{B01001010,B01010101,B01010101,B01010101,B00101001}, /* 134 = § */
{B00000001,B00000000,B00000001,B00000000,B00000000}, /* 135 = ¨ */
{B00100010,B01001001,B01010101,B01010101,B00100010}, /* 136 = © */
{B00000110,B00001001,B00001001,B00000110,B00000000}, /* 137 = ª */
{B00010000,B00101000,B01010100,B00101000,B01000100}, /* 138 = « */
{B00001000,B00001000,B00011000,B00000000,B00000000}, /* 139 = ¬ */
{B00000000,B00000000,B00000000,B00000000,B00000000}, /* 140 = ­ */
{B00000010,B01111101,B00010101,B01101001,B00000010}, /* 141 = ® */
{B00000001,B00000001,B00000001,B00000001,B00000001}, /* 142 = ¯ */
{B00000111,B00000101,B00000111,B00000000,B00000000}, /* 143 = ° */
{B01001000,B01011100,B01001000,B00000000,B00000000}, /* 144 = ± */
{B00011001,B00010101,B00010101,B00010010,B00000000}, /* 145 = ² */
{B00010001,B00010101,B00010101,B00001010,B00000000}, /* 146 = ³ */
{B00000010,B00000001,B00000000,B00000000,B00000000}, /* 147 = ´ */
{B01111100,B00100000,B00100000,B00111100,B00100000}, /* 148 = µ */
{B00000110,B00001111,B01111111,B00000001,B01111111}, /* 149 = ¶ */
{B00001100,B00001100,B00000000,B00000000,B00000000}, /* 150 = · */
{B01000000,B00000000,B00000000,B00000000,B00000000}, /* 151 = ¸ */
{B00010010,B00011111,B00010000,B00000000,B00000000}, /* 152 = ¹ */
{B00001110,B00010001,B00010001,B00011111,B00000000}, /* 153 = º */
{B01000100,B00101000,B01010100,B00101000,B00010000}, /* 154 = » */
{B01110111,B00001000,B00110100,B00101010,B01111101}, /* 155 = ¼ */
{B01110111,B00001000,B01010100,B01101010,B01010001}, /* 156 = ½ */
{B01010101,B00101110,B00010000,B00101010,B01111101}, /* 157 = ¾ */
{B00110000,B01001000,B01000101,B01000000,B00100000}, /* 158 = ¿ */
{B01111000,B00100101,B00100110,B00100100,B01111000}, /* 159 = À */
{B01111000,B00100100,B00100110,B00100101,B01111000}, /* 160 = Á */
{B01111000,B00100110,B00100101,B00100110,B01111000}, /* 161 = Â */
{B01111001,B00100110,B00100101,B00100110,B01111000}, /* 162 = Ã */
{B01111000,B00100101,B00100100,B00100101,B01111000}, /* 163 = Ä */
{B01111000,B00100111,B00100101,B00100111,B01111000}, /* 164 = Å */
{B01111100,B00010010,B01111111,B01001001,B01000001}, /* 165 = Æ */
{B00011110,B00100001,B01100001,B00100001,B00010010}, /* 166 = Ç */
{B01111100,B01010101,B01010110,B01010100,B01000100}, /* 167 = È */
{B01111100,B01010100,B01010110,B01010101,B01000100}, /* 168 = É */
{B01111100,B01010110,B01010101,B01010110,B01000100}, /* 169 = Ê */
{B01111100,B01010101,B01010100,B01010101,B01000100}, /* 170 = Ë */
{B01000101,B01111110,B01000100,B00000000,B00000000}, /* 171 = Ì */
{B01000100,B01111110,B01000101,B00000000,B00000000}, /* 172 = Í */
{B01000110,B01111101,B01000110,B00000000,B00000000}, /* 173 = Î */
{B01000101,B01111100,B01000101,B00000000,B00000000}, /* 174 = Ï */
{B00001000,B01111111,B01001001,B01000001,B00111110}, /* 175 = Ð */
{B01111101,B00001010,B00010001,B00100010,B01111100}, /* 176 = Ñ */
{B00111000,B01000101,B01000110,B01000100,B00111000}, /* 177 = Ò */
{B00111000,B01000100,B01000110,B01000101,B00111000}, /* 178 = Ó */
{B00111000,B01000110,B01000101,B01000110,B00111000}, /* 179 = Ô */
{B00111010,B01000101,B01000110,B01000101,B00111000}, /* 180 = Õ */
{B00111000,B01000101,B01000100,B01000101,B00111000}, /* 181 = Ö */
{B00100010,B00010100,B00001000,B00010100,B00100010}, /* 182 = × */
{B00111110,B01100001,B01011101,B01000011,B00111110}, /* 183 = Ø */
{B00111100,B01000001,B01000010,B01000000,B00111100}, /* 184 = Ù */
{B00111100,B01000000,B01000010,B01000001,B00111100}, /* 185 = Ú */
{B00111100,B01000010,B01000001,B01000010,B00111100}, /* 186 = Û */
{B00111100,B01000001,B01000000,B01000001,B00111100}, /* 187 = Ü */
{B00000110,B00001000,B01110010,B00001001,B00000110}, /* 188 = Ý */
{B01111111,B00100010,B00100010,B00100010,B00011100}, /* 189 = Þ */
{B01111110,B00000001,B01001001,B01001101,B00110010}, /* 190 = ß */
{B00100000,B01010101,B01010110,B01010100,B01111000}, /* 191 = à */
{B00100000,B01010100,B01010110,B01010101,B01111000}, /* 192 = á */
{B00100000,B01010110,B01010101,B01010110,B01111000}, /* 193 = â */
{B00100000,B01010101,B01010110,B01010101,B01111010}, /* 194 = ã */
{B00100000,B01010101,B01010100,B01010101,B01111000}, /* 195 = ä */
{B00100000,B01010111,B01010101,B01010111,B01111000}, /* 196 = å */
{B00100000,B01010100,B01111100,B01010100,B01001000}, /* 197 = æ */
{B00011000,B00100100,B01100100,B00100100,B00010100}, /* 198 = ç */
{B00111000,B01010101,B01010110,B01010100,B00011000}, /* 199 = è */
{B00111000,B01010100,B01010110,B01010101,B00011000}, /* 200 = é */
{B00111000,B01010110,B01010101,B01010110,B00011000}, /* 201 = ê */
{B00111000,B01010101,B01010100,B01010101,B00011000}, /* 202 = ë */
{B01000101,B01111110,B01000000,B00000000,B00000000}, /* 203 = ì */
{B01000100,B01111110,B01000001,B00000000,B00000000}, /* 204 = í */
{B01000110,B01111101,B01000010,B00000000,B00000000}, /* 205 = î */
{B01000101,B01111100,B01000001,B00000000,B00000000}, /* 206 = ï */
{B00110000,B01001001,B01001001,B01001010,B00111101}, /* 207 = ð */
{B01111100,B00001001,B00000110,B00000101,B01111010}, /* 208 = ñ */
{B00111000,B01000101,B01000110,B01000100,B00111000}, /* 209 = ò */
{B00111000,B01000100,B01000110,B01000101,B00111000}, /* 210 = ó */
{B00111000,B01000110,B01000101,B01000110,B00111000}, /* 211 = ô */
{B00111000,B01000101,B01000110,B01000101,B00111010}, /* 212 = õ */
{B00111000,B01000101,B01000100,B01000101,B00111000}, /* 213 = ö */
{B00001000,B00101010,B00001000,B00000000,B00000000}, /* 214 = ÷ */
{B00111000,B01100100,B01010100,B01001100,B00111000}, /* 215 = ø */
{B00111100,B01000001,B01000010,B00100000,B01111100}, /* 216 = ù */
{B00111100,B01000000,B01000010,B00100001,B01111100}, /* 217 = ú */
{B00111100,B01000010,B01000001,B00100010,B01111100}, /* 218 = û */
{B00111100,B01000001,B01000000,B00100001,B01111100}, /* 219 = ü */
{B00000100,B01001000,B00110010,B00001001,B00000100}, /* 220 = ý */
{B01111111,B00101000,B00101000,B00101000,B00010000}, /* 221 = þ */
{B00000100,B01001001,B00110000,B00001001,B00000100}  /* 222 = ÿ */
};

// Define the ChipSelect pin for the led matrix (Dont use the SS or MISO pin of your Arduino!)
// Other pins are Arduino specific SPI pins (MOSI=DIN, SCK=CLK of the LEDMatrix) see https://www.arduino.cc/en/Reference/SPI
const uint8_t LEDMATRIX_CS_PIN = 9;

// Number of 8x8 segments you are connecting
const int LEDMATRIX_SEGMENTS = 4;
const int LEDMATRIX_WIDTH    = LEDMATRIX_SEGMENTS * 8;

// If your display is backwards (left to right) and jumbled set this to true
bool reverse_display = false;

// The LEDMatrixDriver class instance
LEDMatrixDriver lmd(LEDMATRIX_SEGMENTS, LEDMATRIX_CS_PIN, reverse_display);

// set x to LEDMATRIX_WIDTH to bring text "into" the display.
int x = LEDMATRIX_WIDTH, y = 0;
uint32_t scrollTimerStamp = 0;

const int CHAR_WIDTH = sizeof(font[0]);
//define width of " " since code is handling whitespace.
const int SPACE_WIDTH = 2;
// pixels between characters
const int CHAR_SPACING = 1;
int scrollDelay = 20;

// the text to display
char text[] = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_'abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ";
int textLen = 0;    /*length of text in bytes*/
int textWidth = 0;  /*width of text in pixels*/

void setup() {

  textLen = sizeof(text);
  textWidth = getTextWidth(text);

  lmd.setEnabled(true);
  lmd.setIntensity(1);
}

void loop()
{
  // using a
  if (millis() < scrollTimerStamp)
    return;

  scrollTimerStamp = scrollDelay + millis();

  setText(text, x, 0);

  // the driver is buffering, so we need write
  lmd.display();

  // shift the position
  if(x-- < -textWidth)
    x = LEDMATRIX_WIDTH;
}

// setText - writes text of the given length for the given position, to the driver buffer.
void setText(char* text, int x, int y)
{
  int pos = x;
  for(int i = 0; i < strlen(text); i ++)
  {
    byte asc = text[i] - 32;

    // stop if char is outside visible area
    if(pos > LEDMATRIX_WIDTH)
      return;

    int c_Width = getCharWidth(asc);
    int c_Start = getCharStart(asc);
    // only draw if char is visible
    if (pos > -8)
    {
      setWChar(font[asc], pos, y, c_Width, c_Start);
    }

    pos += c_Width + CHAR_SPACING;
  }
}

// writes char to the driver buffer by passing position (x,y), char width and char start column
void setWChar(byte* chr, int x, int y, int width, int start)
{
  byte bitMask = 1;
  for(int iX = 0; iX < width + (CHAR_SPACING); iX++)
  {
    for(int iY = 0; iY < 8; iY++)
    {
      lmd.setPixel(x + iX, y + iY, (iX > width - 1) ? false : (bool)(chr[iX + start] & bitMask));
      bitMask <<= 1;
    }
    bitMask = 1;
  }
}

// finds the starting pixel (x) of a character - ignoring whitespace
int getCharStart(byte asc)
{
  for(int c = 0; c < CHAR_WIDTH; c++)
  {
    if (font[asc][c] != 0)
      return c;
  }
  return 0;
}

// calculates character width without whitespace.
int getCharWidth(byte asc)
{
  if (asc == 0)
  {
    return SPACE_WIDTH;
  }
  else
  {
    int c_Width = 0;
    for(int c = 0; c < CHAR_WIDTH; c++)
    {
      if (font[asc][c] != 0)
        c_Width++;
    }
    //give extra spacing for .
    if (asc == 14)
      c_Width++;

    return c_Width;
  }
}

// calculates the text width using variable character width and CHAR_SPACING and
int getTextWidth(char* text)
{
  int t_Width = 0;
  for(int i = 0; i < strlen(text); i++)
  {
    byte asc = text[i] - 32;
    t_Width += getCharWidth(asc) + CHAR_SPACING;
  }
  return t_Width;
}
